// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // NextAuth.js fields
  emailVerified DateTime?
  image String?
  
  // Relationships
  accounts Account[]
  sessions Session[]
  otps Otp[]
  flashcardSets FlashcardSet[]
  featureSuggestions FeatureSuggestion[]
  comments Comment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Otp {
  id         String   @id @default(cuid())
  phone      String
  otpHash    String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  verifiedAt DateTime?
  attempts   Int      @default(0)
  
  // Relationship to User
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  @@index([phone])
  @@map("otps")
}

model FlashcardSet {
  id              String    @id @default(cuid())
  title           String
  description     String?
  thumbnailId     String?
  createdBy       String
  createdByName   String?
  createdAt       DateTime  @default(now())
  published       Boolean   @default(false)
  flashcardsData  Json
  flashcardCount  Int
  standard        String
  subject         String
  
  author          User      @relation(fields: [createdBy], references: [id])

  @@map("flashcard_sets")
}

enum SuggestionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DECLINED
}

model FeatureSuggestion {
  id          String   @id @default(cuid())
  title       String
  description String
  status      SuggestionStatus @default(PENDING)
  upvotes     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  comments    Comment[]

  @@map("feature_suggestions")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  suggestionId String
  suggestion  FeatureSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@map("comments")
}
